{
  "Insert python shebang": {
    "prefix": "env",
    "body": [
      "#!/usr/bin/env python",
      "${0}"
    ],
    "description": "Add shebang line for default python interpreter."
  },
  "Insert python3 shebang": {
    "prefix": "env3",
    "body": [
      "#!/usr/bin/env python3",
      "${0}"
    ],
    "description": "Add shebang line for default python3 interpreter."
  },
  "from ... import ...": {
    "prefix": "from",
    "body": "from ${1:package/module} import ${2:names}${0}",
    "description": "Import objects from the module directly."
  },
  "New class": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName}(${2:object}):",
      "\t\"\"\"${3:docstring for ${1}.}\"\"\"",
      "\tdef __init__(self, ${4:arg}):",
      "\t\t${5:super(${1}, self).__init__()}",
      "\t\tself.arg = arg",
      "\t\t${0}"
    ],
    "description": "Code snippet for a class definition."
  },
  "New method": {
    "prefix": "defs",
    "body": [
      "def ${1:mname}(self, ${2:arg}):",
      "\t${3:pass}${0}"
    ],
    "description": "New class method definition."
  },
  "New function": {
    "prefix": "def",
    "body": [
      "def ${1:fname}(${2:arg}):",
      "\t${3:pass}${0}"
    ],
    "description": "New function definition."
  },
  "New property": {
    "prefix": "prop",
    "body": [
      "@property",
      "def ${1:foo}(self):",
      "\t\"\"\"${2:The ${1} property.}\"\"\"",
      "\t${3:return self._${1}}",
      "@${4:${1}}.setter",
      "def ${5:${1}}(self, value):",
      "\t${6:self._${1}} = value",
      "\t${0}"
    ],
    "description": "New property: get and set via decorator"
  },
  "New froperty": {
    "prefix": "fprop",
    "body": [
      "def ${1:foo}():",
      "\tdoc = \"${2:The ${1} property.}\"",
      "\tdef fget(self):",
      "\t\t${3:return self._${1}}",
      "\tdef fset(self, value):",
      "\t\t${4:self._${1} = value}",
      "\tdef fdel(self):",
      "\t\t${5:del self._${1}}",
      "\treturn locals()",
      "${1} = property(**${1}())",
      "${0}"
    ],
    "description": ""
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}${0}"
    ],
    "description": "Code snippet for the if statement."
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:value} in ${2:iterable}:",
      "\t${3:pass}${0}"
    ],
    "description": "Code snippet to create a for loop structure."
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:condition}:",
      "\t${2:pass}${0}"
    ],
    "description": "Code snippet to create a while loop structure."
  },
  "try:except:": {
    "prefix": "try",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise ${3}}${0}"
    ],
    "description": "Code Snippet for a try and except blocks."
  },
  "try:except:else": {
    "prefix": "trye",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise ${3}}",
      "else:",
      "\t${5:pass}${0}"
    ],
    "description": "Code Snippet for a try/except with else statement."
  },
  "try:except:finally": {
    "prefix": "tryf",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "finally:",
      "\t${5:pass}${0}"
    ],
    "description": "Code Snippet for a try/except/finally."
  },
  "try:except:else:finally": {
    "prefix": "tryef",
    "body": [
      "try:",
      "\t${1:pass}",
      "except${2: ${3:Exception} as ${4:e}}:",
      "\t${5:raise}",
      "else:",
      "\t${6:pass}",
      "finally:",
      "\t${7:pass}${0}"
    ],
    "description": "Code Snippet for a try/except/finally with else statement."
  },
  "if main": {
    "prefix": "ifmain",
    "body": [
      "if __name__ == \"__main__\":",
      "\t${1:main()}${0}"
    ],
    "description": "Create implicitly all the code at the top level."
  }
}
